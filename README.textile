h1. OAuthClient Plugin for Joyent Smart Platform Sammy

Version: 0.1
Created by: Matt Constantine (&#064;thismatt on twitter, designmc at gmail, matt20120 on aim) with heavy oauth lifting provided by the NetFlix OAuth javascript client. See oauth.js for the license.  Additional modifications by Jim Pick (&#064;jimpick on twitter/identica, jim&#064;joyent.com)

Live example: <a href="http://oauth-test1.jimpick.com/">http://oauth-test1.jimpick.com/</a>

h2. Prerequisites

You'll need to include HMAC in your rsp.conf file in order for this to work. To enable, just append 'HMAC' (without quotes) to the rsp.conf extensions line. On a mac your rsp.conf is likely located at: /Applications/Smart.app/Contents/Resources/Image/etc/rsp.conf

Optionally, you can use the provided sha1.js but you'll likely need up raise the rsp.conf oplimit to 200000.

h2. Description

This plugin produces two Sammy rules connected to two paths of your choosing. One rule kicks off the process, sending a visitor to Twitter (for example) for verification. The second rule serves as the redirect target for Twitter for authenticated users. From there, we save the details provided in the redirect body in the user model you provide. We also save the id of the newly created model in session.person_id.

h2. Usage, or, Twitter Authentication in 7 Easy Steps.

1) git submodule add git://github.com/jpick/Smart-OAuth-Client.git js/oauth-client

2) Here is a js/bootstrap.js with a trivial demo:

<pre>
<code>
// Example code is public domain - Jim Pick
system.use("com.joyent.Sammy");
system.use("com.joyent.Resource");
system.use("oauth-client.OAuthClient");
enable("Sessions");

var Person = new Resource('person');

OAuthClient.initialize({
  model                 : Person,    // which model to store the
                                     // user info from the provider.
  consumerKey           : "your key",
  consumerSecret        : "your secret",
  loginPath             : "/authorize/",  // where the 'login' link points to.
  callbackPath          : "/authorized/", // path you give the service provider
                                          // to redirect to after sign in.
  returnPath            : "/welcome",     // path we redirect to from
                                          // callbackPath
  signatureMethod       : "HMAC-SHA1",
  requestTokenURL       : "http://twitter.com/oauth/request_token",
  userAuthorizationURL  : "http://twitter.com/oauth/authorize",
  accessTokenURL        : "http://twitter.com/oauth/access_token", 
  requestTokenFailed    : function() {
    return "Sorry. We could not complete your sign in."
  },
  accessTokenFailed     : function() {
    return "Sorry. We could not complete your sign in."
  }
})

GET("/", function() {
  var hmac = system.digest.hmac == null ? 'not present' : 'present';
  var page = <html>
    <head>
      <title>OAuth Test</title>
    </head>
    <body>
      <h2><a href='/authorize/'>Log in through Twitter</a></h2>
      <small>system.digest.hmac is {hmac}</small>
    </body>
  </html>
  return page.toString();
});

GET("/welcome", function() {
  var person = Person.get( this.session.person_id );
  var page = <html>
    <head>
      <title>OAuth Test - Success!</title>
    </head>
    <body>
      <h1>Welcome {person.screen_name}!</h1>
      <p>It worked! You've just logged in through Twitter.</p>
    </body>
  </html>
  return page.toString();
})
</code>
</pre>

3) Fill in the consumerKey and consumerSecret with the values you get from your provider. For Twitter, go to http://twitter.com/oauth_clients

4) When you register a new application on twitter, they ask for the Callback URL. Make sure it and callbackPath refer to the same place.

5) Deploy. You'll need a live server to test this on. But hey, Smart Platform deployment is easy, right? Twitter currently doesn't accept localhost as a valid callback.

6) ...

7) Profit.

h2. Additional Services

Currently this plugin has only been tested with Twitter. The underlying oauth.j lib has been tested with more services. If you need OAuth for additional services, just follow the same steps above (you'll have one OAuth.initialize for each service), but change the loginPath, callbackPath to something unique, then proceed as you were.
